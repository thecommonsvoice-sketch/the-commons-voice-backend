generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          Role           @default(USER)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshTokens RefreshToken[]
  articles      Article[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Article {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  content         String
  excerpt         String?
  metaTitle       String?
  metaDescription String?
  coverImage      String?
  ogImage         String?
  categoryId      String
  authorId        String
  status          ArticleStatus @default(DRAFT)
  deletedAt       DateTime?     // <-- Added soft delete field
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  author   User     @relation(fields: [authorId], references: [id])
  category Category @relation(fields: [categoryId], references: [id])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

enum Role {
  ADMIN
  EDITOR
  REPORTER
  USER
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
