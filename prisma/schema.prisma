generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  name          String?
  role          Role           @default(USER)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isActive      Boolean        @default(true)
  articles      Article[]
  refreshTokens RefreshToken[]
  comments      Comment[]      // Relation to comments
  bookmarks     Bookmark[]     // Relation to bookmarks
}

model RefreshToken {
  id        String   @id @default(cuid())
  jti       String   @unique
  userId    String
  revoked   Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Article {
  id              String        @id @default(cuid())
  title           String
  slug            String        @unique
  content         String
  coverImage      String?
  categoryId      String
  authorId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          ArticleStatus @default(DRAFT)
  excerpt         String?
  metaDescription String?
  metaTitle       String?
  ogImage         String?
  tags            String[]      @default([])
  deletedAt       DateTime?
  author          User          @relation(fields: [authorId], references: [id])
  category        Category      @relation(fields: [categoryId], references: [id])
  comments        Comment[]     // Relation to comments
  bookmarks       Bookmark[]    // Relation to bookmarks
  videos          ArticleVideo[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  userId    String
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([articleId])
}

model Bookmark {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId]) // Ensure a user can bookmark an article only once
  @@index([userId])
  @@index([articleId])
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  createdAt   DateTime  @default(now())
  description String?
  isActive    Boolean   @default(true)
  updatedAt   DateTime  @updatedAt
  articles    Article[]
}

model ArticleVideo {
  id          String   @id @default(cuid())
  articleId   String
  article     Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  type        String   // "upload" or "embed" 
  url         String
  title       String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([articleId])
}

enum Role {
  ADMIN
  EDITOR
  REPORTER
  USER
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
